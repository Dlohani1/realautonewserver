<?php

namespace App\Http\Controllers;

use App\Role;
use App\RoleUser;
use App\User;
use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Auth;
//use Illuminate\Contracts\Session\Session;
use Illuminate\Support\Facades\Hash;
use Session;
use DB;

class AdminController extends Controller
{


	public function manage_admins(){
		$data['adminlist'] = User::where('usertype',2)->get();
		return view('manage-admins',$data);
	}

	public function add_new_admin(){
		return view('add-new-admin');
	}
	
	public function addStaff(){
		return view('add-staff');
	}

	public function editStaff(Request $request, $adminsid){
		
		$data['admindata'] = User::where('id',$adminsid)->first();

		return view('edit-staff',$data);
    	}

	public function edit_staff_post(Request $request, $adminsid){
        
		$data = array(
            'name'                        => $request['name'],
            'phone_no'                    => $request['phone_no'],
            'status'                      => $request['status'],
        );
		
		if ($request['yesno'] == "1" && strlen(trim($request['pwd']))) {			
            $data['password'] = Hash::make($request['pwd']);
		}

        User::where('id', $adminsid)->update($data);
		
		Session::flash('message', "Records Updated successfully.");
        return redirect('view-staff');
        //return redirect('edit-admins/'.$adminsid);
    }

	public function viewStaff() {

		$staffFilter = array(
			'admin_id' => Auth::user()->id,
		);
		$data['staffList'] = User::where($staffFilter)->get();
		return view('view-staff',$data);
	}
	
	public function saveStaff(Request $request){

        $msg = [
            'name.required' => 'Enter Your Name',
            'email.required' => 'Enter Your Last Name',
            'phone_no.required' => 'Enter Your Mobile No',
			'password.required' => 'Enter Your Password',
			'cpassword.required' => 'Enter Your Confirm Password',
        ];
        $this->validate($request, [
            'name' => 'required',
            'phone_no' => 'required',
            'email' => 'required|unique:users|email',
            'password' => 'min:6',
            'cpassword' => 'min:6|required_with:password|same:password'
        ], $msg);


        $admin = new User();
        $admin->name       = $request['name'];
		$admin->email      = $request['email'];
        $admin->phone_no   = $request['phone_no'];
        $admin->password   = bcrypt($request->cpassword);
		$admin->admin_id   = Auth::user()->id;
        $admin->status     = 1;
		$admin->usertype   = 3;
        $admin->whatsapp_api_key_lock   = 1;
        $admin->email_api_key_lock      = 1;
        $admin->sms_api_key_lock        = 1;
        $admin->save();

	    return redirect()->route('add-staff')->with('message','Successfully registered.');
	}

	public function save_admin(Request $request){

        $msg = [
            'name.required' => 'Enter Your Name',
            'email.required' => 'Enter Your Last Name',
            'phone_no.required' => 'Enter Your Mobile No',
			'password.required' => 'Enter Your Password',
			'cpassword.required' => 'Enter Your Confirm Password',
        ];
        $this->validate($request, [
            'name' => 'required',
            'phone_no' => 'required',
            'email' => 'required|unique:users|email',
            'password' => 'min:6',
            'cpassword' => 'min:6|required_with:password|same:password'
        ], $msg);


        $admin = new User();
        $admin->name       = $request['name'];
		$admin->email      = $request['email'];
        $admin->phone_no   = $request['phone_no'];
        $admin->password   = bcrypt($request->cpassword);
        $admin->status     = 1;
		$admin->usertype   = 2;
        $admin->whatsapp_api_key_lock   = 1;
        $admin->email_api_key_lock      = 1;
        $admin->sms_api_key_lock        = 1;
        $admin->save();

	    return redirect()->route('add-new-admin')->with('message','Successfully registered.');
	}

    public function edit_admins(Request $request, $adminsid){

		$data['admindata'] = User::where('id',$adminsid)->first();

		return view('edit-admins',$data);
    }



    public function edit_admins_post(Request $request, $adminsid){
        
		$data = array(
            'name'                        => $request['name'],
            'phone_no'                    => $request['phone_no'],
            'status'                      => $request['status'],
            'whatsapp_api_key_lock'       => $request['whatsapp_api_key_lock'],
            'email_api_key_lock'          => $request['email_api_key_lock'],
            'sms_api_key_lock'            => $request['sms_api_key_lock'],
			'sms_api_key'                 => strlen(trim($request['sms-api-key'])) > 0 ? trim($request['sms-api-key']) : null,			
			'sms_from_name'            => strlen(trim($request['sms-username'])) > 0 ? trim($request['sms-username']) : null,
			'email_api_key'               => strlen(trim($request['email-api-key'])) > 0 ? trim($request['email-api-key']) : null,
			'whatsapp_api_key'            => strlen(trim($request['whatsapp-api-key'])) > 0 ? trim($request['whatsapp-api-key']) : null,
			'whatsapp_username'            => strlen(trim($request['whatsapp-username'])) > 0 ? trim($request['whatsapp-username']) : null,
        );
		
		if ($request['yesno'] == "1" && strlen(trim($request['pwd']))) {			
            $data['password'] = Hash::make($request['pwd']);
		}

        User::where('id', $adminsid)->update($data);
			
	/*
		$userId = $adminsid;
		$plan = $request['user-plans'];
		$days = "15 days"; //trial plan
		
		if ($plan == "2") {
			$days = "90 days";
		} else if ($plan == "3") {
			$days = "180 days";
		} else if ($plan == "4") {
			$days = "365 days";
		}
		
		$startDate = $request['plan-start-date'];
		
		$endDate = date('Y-m-d', strtotime($startDate. ' + '.$days));
		
		$existPlan =  DB::table('user_plan_details')->select('id')->where('user_id', $adminsid)->count();
	
		if(!$existPlan) {
			DB::insert('insert into user_plan_details (user_id,user_plans_id,start_date,end_date) values(?,?,?,?)',[$userId,$plan,$startDate,$endDate]);
		} else {
			$planData = array(
				"user_plans_id" => $plan,
				"start_date" => $startDate,
				"end_date" => $endDate
			);
			
			$affected = DB::table('user_plan_details')->where('user_id', $adminsid)->update($planData);			
		}
	*/	
        Session::flash('message', "Records Updated successfully.");
        return redirect('manage-admins');
        //return redirect('edit-admins/'.$adminsid);
    }

    public function edit_admins_post1(Request $request, $adminsid){
        
		$data = array(
            'name'                        => $request['name'],
            'phone_no'                    => $request['phone_no'],
            'status'                      => $request['status'],
            'whatsapp_api_key_lock'       => $request['whatsapp_api_key_lock'],
            'email_api_key_lock'          => $request['email_api_key_lock'],
            'sms_api_key_lock'            => $request['sms_api_key_lock'],
			'sms_api_key'                 => strlen(trim($request['sms-api-key'])) > 0 ? trim($request['sms-api-key']) : null,			
			'sms_from_name'            => strlen(trim($request['sms-username'])) > 0 ? trim($request['sms-username']) : null,
			'email_api_key'               => strlen(trim($request['email-api-key'])) > 0 ? trim($request['email-api-key']) : null,
			'whatsapp_api_key'            => strlen(trim($request['whatsapp-api-key'])) > 0 ? trim($request['whatsapp-api-key']) : null,
			'whatsapp_username'            => strlen(trim($request['whatsapp-username'])) > 0 ? trim($request['whatsapp-username']) : null,
        );
		
		if ($request['yesno'] == "1" && strlen(trim($request['pwd']))) {			
            $data['password'] = Hash::make($request['pwd']);
		}

        User::where('id', $adminsid)->update($data);

        Session::flash('message', "Records Updated successfully.");
        return redirect('manage-admins');
        //return redirect('edit-admins/'.$adminsid);
    }

    /**
    * GET ACTIVE-IN-ACTIVE USERS DETAILS
    *
    * @return true or false
    */
    public function active_inactive_user(Request $request) {

        $id     = $request->get('id');
        $status = $request->get('status');

        if($status==1){
            User::where('id',$id)->update([
                'status' => 2,
            ]);
            $st   = 'InActive';
            $html = '<a href="javascript:void(0);" class="btn btn-warning" onclick="active_inactive_user('.$id.','.$st.')"><i class="fa fa-lock"></i></a>&emsp;';
            return json_encode(array('id' => $id, 'html' => $html));
        }
        else{
            User::where('id',$id)->update([
                'status' => 1,
            ]);
            $st   = 'Active';
            $html = '<a href="javascript:void(0);" class="btn btn-success" onclick="active_inactive_user('.$id.','.$st.')"><i class="fa fa-check-circle"></i></a>&emsp;';
            return json_encode(array('id' => $id, 'html' => $html));
        }
    }

	public function showReport(Request $request) {
		 $id = $request->get('id');
		 echo $id; die;
		 
	}
	
	public function setSettings(Request $request){
		//$data["whatsappapikey"] = User::where('id',Auth::user()->id)->get()[0]->whatsapp_api_key;
        //$data["whatsapp_username"] = User::where('id',Auth::user()->id)->get()[0]->whatsapp_username;
		//return view("whats-app-api-capture",$data);		
		return view('admin-settings');
	}
	
	public function postWhatsAppPlan(){
		
		
		$inputArray = array(		
			"username" => "AYAN SAHA",
			"password" => "BANGALORE@2020",
			"customerUsername" => "a.saha",
			"plan" => "reseller_user_server_single_credit_500_15_days",
			"note" => "Setting 500 Credits"
		);
		
	
        $url       = "https://app.messageautosender.com/api/v1/reseller/customer/applyPlan";
        $ch        = curl_init( $url );
        $payload   = json_encode($inputArray );
        curl_setopt( $ch, CURLOPT_POSTFIELDS, $payload );
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true );

        # Send request.
        $Fetchresult = curl_exec($ch);
		
		print_r($Fetchresult); die;
        $curl_errno  = curl_errno($ch);
        $curl_error  = curl_error($ch);
        curl_close($ch);

        # Print response.
        if ($curl_errno > 0) {
            echo "cURL Error ($curl_errno): $curl_error <br/>";
            return "IF Case..";
        } else {
        
		}
	}



	public function webhookVerify(Request $request) {

             $input = json_decode(file_get_contents('php://input'), true);	
             $pageId = isset($input['entry'][0]['changes'][0]['value']['page_id']) ? $input['entry'][0]['changes'][0]['value']['page_id'] : 0;
	     $formId = isset($input['entry'][0]['changes'][0]['value']['form_id']) ? $input['entry'][0]['changes'][0]['value']['form_id'] : 0;
     	     $leadgenId = isset($input['entry'][0]['changes'][0]['value']['leadgen_id']) ? $input['entry'][0]['changes'][0]['value']['leadgen_id'] : 0;

	    if ($pageId != 0 && $formId != 0) {

		$leads = DB::table('subscribe_pages')
            	->select('id','page_token')
	    	->where([['page_id',$pageId],['form_id',$formId]])
            	->get();
		if (isset($leads[0]->id)) {
		/*	DB::table('subscribe_pages')
                ->where('id', $leads[0]->id)
                ->update(['leadgen_id' => "$leadgenId"]);
		*/
		$pageToken = $leads[0]->page_token;




		DB::insert('insert into facebook_leads (subscribe_pages_id,leadgen_id) values(?,?)',[$leads[0]->id,$leadgenId]);

		$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => 
"https://graph.facebook.com/v11.0/1052462328826309?access_token=EAAvEy5cNwB8BAJ8ZCt8HCyayAFtKS9ZCkL8Ms8UfwouZBgQgqOTjZB7Ox2oEBywfYaTDZAS19mZCTZBZAlSGZB4ZCfZCzCgPjzAcGhUB4OQV4gZCZCZBJhVLqbUGqGvO6tvvtL69PIDa6uTWuPcNerwmdgZBbX2TTstchy5j0oeu6DAoFRGYN6EoZB6CtCsZBnCzi5JsDmUHf57ZBpdyT3XQZDZD",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET"
));

$response = curl_exec($curl);
$err = curl_error($curl);
curl_close($curl);

$leadData = json_decode($response,true);

if (isset($leadData['field_data'])) {
$value = $leadData['field_data'][0]['name'];


}



		}
	    }

\Log::info('Incoming verification token: ' . $leadgenId); // I added this line
	if ($request->get('hub_mode') === 'subscribe' && $request->get('hub_verify_token') === "abc123") {
		return Response::create($request->get('hub_challenge'))->send();
	}
/*
		error_log(print_r($request->input()),true);
$request_body = file_get_contents('php://input');

error_log(print_r($request_body),true);

		$challenge = $_REQUEST['hub_challenge'];
		$verify_token = $_REQUEST['hub_verify_token'];


		if ($verify_token === "abc123") {


			$request_body = file_get_contents('php://input')

			error_log('testwebhook');
			echo $challenge;
		}
*/

	}


function userAccessToken() {

// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/


//$ch = curl_init('https://graph.facebook.com/v11.0/oauth/access_token?grant_type=fb_exchange_token&client_id=3312603435483167&client_secret=ab4719b6fd51d77b5b639ffdc538a2bd&fb_exchange_token=SHORT-LIVED-USER-ACCESS-TOKEN');
$ch = curl_init('https://graph.facebook.com/oauth/access_token?client_id=3312603435483167&client_secret=ab4719b6fd51d77b5b639ffdc538a2bd&grant_type=client_credentials');


curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

$data = curl_exec($ch);
 
curl_close($ch);

print_r(var_dump($data));
//die;

/*


$ch = curl_init('https://graph.facebook.com/v11.0/1052462328826309?access_token=3312603435483167');


curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

$data = curl_exec($ch);

curl_close($ch);

print_r(var_dump($data));
*/


$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => "https://graph.facebook.com/v11.0/1052462328826309?access_token=EAAvEy5cNwB8BAIos3A4vDpFmQZAZAEKhSYqaru3SXazE4r1sswRXZCYj1dZCsgA9pSYKUV7yvKa7J4LJCZCDGGLONFugQXmqC4r7eMZCtaetsyFpFAfeXpWJrq9yeBHkS0v05JFh4kBoQfyLizqvK96OZAiUSXVO4UM0E4OP5qXUKU7Pca5fkU9roTpq6K3wmgvEsSDni79EfAcD9PwFBMV2xTWRCfVe04ZD",
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => "",
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 30,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => "GET"
));

$response = curl_exec($curl);





print_r(var_dump($response)); die;
$err = curl_error($curl);

curl_close($curl);

if ($err) {
  echo "cURL Error #:" . $err;
} else {
  echo $response;
}

/*

$ch = curl_init('https://graph.facebook.com/114679157061500?
  fields=access_token&
  access_token=3312603435483167|xcmaJU-DRhtR6SBd-0zmooJSubQ');

curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);


$result = curl_exec($ch);
print_r(var_dump($result));


if (curl_errno($ch)) {
    echo 'Error:' . curl_error($ch);
}
curl_close($ch);
*/
}

}
