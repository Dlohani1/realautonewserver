<?php

namespace App\Http\Controllers;

use Excel;
use Helper;
use Session;
use DateTime;
use App\User;
use App\Models\Lead;
use App\Models\Project;
use App\Models\Segment;
use App\Models\Campaign;
use App\Models\LeadcornCampaigns;
//use App\Models\LeadReports;
use App\Imports\LeadsImport;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use App\Http\Controllers\Controller;
use App\Models\LeadComments;
use App\Models\LeadFollowups;
use App\Models\LeadStatus;
//use Maatwebsite\Excel\Facades\Excel;
use App\Models\LeadDetails;

class LeadsController extends Controller
{

    public function __construct()
    {
       $this->middleware('auth');
    }

    /**
    * Show the Admin Category Page.
    *
    * @return \Illuminate\Http\Response
    */
	public function leads_bulk_upload(){
		return view("admin.leads-bulk-upload");
	}

    /**
    * Add Category master
    *
    * @return true or false
    */
    public function add_leads(){

        $data["projects"]  = Project::where('user_id', Auth::user()->id)->get();
        $data["segments"]  = Segment::where('user_id', Auth::user()->id)->get();
        $data["campaigns"] = Campaign::where([['user_id', Auth::user()->id],['is_active',1]])->get();

        return view("add-leads",$data);
    }

    /**
    * Add Leads after post
    *
    * @return true or false
    */
    function add_leads_post_data(Request $request)
    {
        $msg = [
            'name.required'         => 'Lead Name Should Not Be Left Blank',
            'mail_id.required'      => 'Mail ID Should Not Be Left Blank',
            'mobile_no.required'    => 'Mobile Number Should Not Be Left Blank',
            'project_type.required' => 'Project Type Should Not Be Left Blank',
            'segment_type.required' => 'Please Select Any Segment',
            'campaign_id.required'  => 'Please Select Campaign',
        ];
		
        $this->validate($request, [
            'name'         => 'required',
            'mail_id'      => 'required',
            'mobile_no'    => 'required',
            'project_type' => 'required',
            'segment_type' => 'required',
            'campaign_id'  => 'required',
        ], $msg);

        ////////// Checking Unique Segment Name As Per User //////////
        $existName = Checkusersegmentname($request->segment_name);
        ////////// End Of Checking Unique Segment Name As Per User //////////

        if ($existName == "") { // Modified By Subrata Saha

            if($request->project_type == 2){ // FOR NEW

                $project = new Project();
                $project->user_id      = Auth::user()->id;
                $project->project_name = $request['project_name'];
                $project->for_source   = 'Facebook';
                $project->status       = 1;
                $project->save();
                $projectid   = $project->id;
                $projectname =  $request['project_name'];

            } else {
                $projectid   = $request['project_id'];
                $projectname = Project::where('id',$projectid)->first()->project_name;
            }

            if($request->segment_type == 2){ // FOR NEW

                $segment = new Segment();
                $segment->user_id      = Auth::user()->id;
                $segment->segment_name = $request['segment_name'];
                $segment->for_source   = 'Facebook';
                $segment->status       = 1;
                $segment->save();
                $segmentid   = $segment->id;
                $segmentname = $request['segment_name'];

            }else{
                $segmentid   = $request['segment_id'];
                $segmentname = Segment::where('id', $segmentid)->first()->segment_name;
            }

        } else {
            return redirect(route('add-leads'))->with('error-message', 'This Segment Name Already Taken!! Please Provide Another Segment Name!!!');
        }

date_default_timezone_set("Asia/kolkata");

        $lead = new Lead();
        $lead->user_id               = Auth::user()->id;

        $lead->project_id            = $projectid;
        $lead->project_type          = $request->project_type;
        $lead->project_name          = $projectname;

        $lead->segment_id            = $segmentid;
        $lead->segment_type          = $request->segment_type;
        $lead->segment_name          = $segmentname;

        $lead->campaigns_id          = $request['campaign_id'];
        $lead->name                  = $request['name'];
        $lead->mail_id               = $request['mail_id'];
        $lead->mobile_no             = $request['mobile_no'];
        $lead->country               = $request['country'];
        $lead->state                 = $request['state'];
        $lead->city                  = $request['city'];
        $lead->zipcode               = $request['zipcode'];
        $lead->company               = $request['company'];
        $lead->position              = $request['position'];
        $lead->address1              = $request['address1'];
        $lead->address2              = $request['address2'];
        $lead->source                = 'Self';
        $lead->status                = 1;
	$lead->campaign_activated_on =  date('Y-m-d H:i:s');
        $lead->save();

        $lastid = $lead->id;
	$campaignActivatedOn = $lead->campaign_activated_on;

        // ADD TEMP CORN DATA TABLE
        $cautomationcount = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.campaign_id', $request['campaign_id'])
            ->where('sms_automation_messages.delivery_type', 'scheduled')
            ->count();

        if($cautomationcount > 0){
            $cautomation = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.is_active','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.campaign_id', $request['campaign_id'])
                ->where('sms_automation_messages.delivery_type', 'scheduled')
		//->where('sms_automation_messages.is_active', 1)
                ->get();

            foreach($cautomation as $row){
		$newDate = explode(" ",$campaignActivatedOn);

                if($row->delivery_day == 0){ //Today
                    //$newdatetime = date('Y-m-d '.$row->delivery_time);
		    $newdatetime = strtotime($newDate[0]." ".$row->delivery_time);
                }else{ //After Day
                    //$newdatetime = new DateTime(date('Y-m-d '.$row->delivery_time).' + '.$row->delivery_day.' day');
                	$newdatetime = strtotime($newDate[0]." ".$row->delivery_time." ".$row->delivery_day." days");
		}

		if ($newdatetime > strtotime("now")) {

                $leadcorn = new LeadcornCampaigns();
                $leadcorn->user_id                = Auth::user()->id;
                $leadcorn->campaign_id            = $request['campaign_id'];
                $leadcorn->lead_id                = $lastid;
                $leadcorn->automation_messages_id = $row->id;

                $leadcorn->name                   = $request['name'];
                $leadcorn->mail_id                = $request['mail_id'];
                $leadcorn->mobile_no              = $request['mobile_no'];
		
                $leadcorn->automation_type        = $row->automation_type;
                $leadcorn->delivery_date_time     = date("Y-m-d H:i:s",$newdatetime);
                $leadcorn->message                = $row->message;
                $leadcorn->image                  = $row->image;
                $leadcorn->status                 = 2;

	//LeadReport
				$leadDetail = new LeadDetails();					
				$leadDetail->lead_id               = $lastid;
				$leadDetail->automation_messages_id= $row->id;
				$leadDetail->delivery_date_time    = date("Y-m-d H:i:s",$newdatetime);                 

		if ($row->is_active == "0") {
			$leadcorn->is_stopped = "1";
			$leadcorn->stopped_reason = "Event is in off state on lead creation";
			$leadDetail->is_cancelled               = "1";
                        $leadDetail->failure_reason="Event in off state on lead creation";


		}

		$leadcorn->save();
$leadDetail->save();
		} else {

$leadDetail = new LeadDetails();
                                $leadDetail->lead_id               = $lastid;
                                $leadDetail->automation_messages_id= $row->id;
                                $leadDetail->delivery_date_time    = date("Y-m-d H:i:s",$newdatetime);
   $leadDetail->is_cancelled               = "1";
                        $leadDetail->failure_reason="Event expired on lead creation";

$leadDetail->save();


}
				/*
				$leadReport = new LeadReports();
                $leadReport->user_id                = Auth::user()->id;
                $leadReport->campaign_id            = $request['campaign_id'];
                $leadReport->lead_id                = $lastid;
                $leadReport->automation_messages_id = $row->id;
                $leadReport->name                   = $request['name'];
                $leadReport->mail_id                = $request['mail_id'];
                $leadReport->mobile_no              = $request['mobile_no'];
                $leadReport->automation_type        = $row->automation_type;
                $leadReport->delivery_date_time     = $newdatetime;
                $leadReport->message                = $row->message;
                $leadReport->image                  = $row->image;
                $leadReport->status                 = 2;
                $leadReport->save();
				*/
            }
        }

        // SEND MESSAGE
        /*
		$smscount = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.automation_type', 1)
            ->where('automations.campaign_id', $request['campaign_id'])
            ->where('sms_automation_messages.delivery_type', 'initial')
			->where('sms_automation_messages.is_active', 1)
            ->count();

        if($smscount > 0){
            $smsdata = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.automation_type', 1)
                ->where('automations.campaign_id', $request['campaign_id'])
                ->where('sms_automation_messages.delivery_type', 'initial')
		->where('sms_automation_messages.is_active', 1)
                ->get();
			
			foreach($smsdata as $key => $value) {
				$message = isset($value->message) ? $value->message : "";
				testsendsms($request['mobile_no'],str_replace("{Full Name}",$request['name'],$message));
			}		
        }
		*/
		$smsEvents = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.automation_type', 1)
            ->where('automations.campaign_id', $request['campaign_id'])
            ->where('sms_automation_messages.delivery_type', 'initial')
			->where('sms_automation_messages.is_active', 1)
            ->get();
		
		if (null !== $smsEvents) {
			foreach($smsEvents as $key => $value) {
				$message = isset($value->message) ? $value->message : "";
				testsendsms($request['mobile_no'],str_replace("{Full Name}",$request['name'],$message));
			}
		}

        // SEND EMAIL
        /*
		$emailcount = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.automation_type', 2)
            ->where('automations.campaign_id', $request['campaign_id'])
            ->where('sms_automation_messages.delivery_type', 'initial')
			->where('sms_automation_messages.is_active', 1)
            ->count();

        if($emailcount > 0){
            $emaildata = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.automation_type', 2)
                ->where('automations.campaign_id', $request['campaign_id'])
                ->where('sms_automation_messages.delivery_type', 'initial')
				->where('sms_automation_messages.is_active', 1)
                ->first();
			$message = isset($emaildata->message) ? $emaildata->message : "";

            testsendemail($request['mail_id'],str_replace("{Full Name}",$request['name'],$message));
        }
		*/
		
		$emailEvent = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.automation_type', 2)
                ->where('automations.campaign_id', $request['campaign_id'])
                ->where('sms_automation_messages.delivery_type', 'initial')
				->where('sms_automation_messages.is_active', 1)
                ->get();
		
		if (null !== $emailEvent) {
			foreach($emailEvent as $key => $value) {
				$message = isset($value->message) ? $value->message : "";

				testsendemail($request['mail_id'],str_replace("{Full Name}",$request['name'],$message));
			}
		}
		
        // SEND WHATSAPP
		/*
        $whatsappcount = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.automation_type', 3)
            ->where('automations.campaign_id', $request['campaign_id'])
            ->where('sms_automation_messages.delivery_type', 'initial')
			->where('sms_automation_messages.is_active', 1)
            ->count();

        if($whatsappcount > 0){
            $whatsappdata = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.automation_type', 3)
                ->where('automations.campaign_id', $request['campaign_id'])
                ->where('sms_automation_messages.delivery_type', 'initial')
				->where('sms_automation_messages.is_active', 1)
                ->first();

            testsendwhatsapp($request['mobile_no'],str_replace("{Full Name}",$request['name'],$whatsappdata->message),$whatsappdata->image);
        }
		*/
		
		$whatsappEvent = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.automation_type', 3)
                ->where('automations.campaign_id', $request['campaign_id'])
                ->where('sms_automation_messages.delivery_type', 'initial')
				->where('sms_automation_messages.is_active', 1)
                ->get();
				
	    if (null !== $whatsappEvent) {
			foreach($whatsappEvent as $key => $value) {
				$message = isset($value->message) ? $value->message : "";
				testsendwhatsapp($request['mobile_no'],str_replace("{Full Name}",$request['name'],$message),$value->image);
			}
		}
		
		
        // INSTANT SEND WHATSAPP (By Subrata Saha)
        /*
		$whatsappcounts = DB::table('sms_automations')
            ->select('sms_automations.user_id','sms_automations.series_name','sms_automations.automation_type','bulk_sms_automation_message.id','bulk_sms_automation_message.message','bulk_sms_automation_message.custom_full_name')
            ->join('bulk_sms_automation_message','bulk_sms_automation_message.series_id','=','sms_automations.id')
            ->where('sms_automations.automation_type', 3)
            ->where('sms_automations.campaigns_id', $request['campaign_id'])
            ->count();

        if($whatsappcounts > 0){
            $whatsappdatas = DB::table('sms_automations')
                ->select('sms_automations.user_id','sms_automations.series_name','sms_automations.automation_type','bulk_sms_automation_message.id','bulk_sms_automation_message.message','bulk_sms_automation_message.custom_full_name','bulk_sms_automation_message.image')
                ->join('bulk_sms_automation_message','bulk_sms_automation_message.series_id','=','sms_automations.id')
                ->where('sms_automations.automation_type', 3)
                ->where('sms_automations.campaigns_id', $request['campaign_id'])
                ->get();

            foreach($whatsappdatas as $row) {
                copytestsendwhatsappnew($request['mobile_no'],str_replace("{Full Name}",$request['name'],$row->message),$row->image);
            }
        }
		*/

		return redirect(route('leads-master'))->with('message', 'Leads Added Successfully!!');
    }

    /**
    * Leads Country after post
    *
    * @return true or false
    */
    public function leads_master_old(){

        $lead = Lead::where([['user_id',Auth::user()->id],['is_active',1]])->orderby('id', 'desc')->limit(500)->get();

        return view('leads-master',array("leaddata" => $lead));
    }

	public function leads_master(Request $request){
        if ($request->ajax()) {
            $data = Lead::where([['leads.user_id',Auth::user()->id],['leads.status',1]])->orderby('leads.id', 'desc')
             ->join('campaigns', 'leads.campaigns_id', '=', 'campaigns.id')
            ->select('campaigns.campaigns_name', 'leads.id', 'leads.name', 'leads.mail_id', 'leads.mobile_no', 'leads.project_name', 'leads.segment_name')
            ->get();
            //dd($data);

            return Datatables::of($data)
                ->addIndexColumn()

                ->addColumn('action', function($row){

                       // <a href="javascript:void(0)" class="edit btn btn-primary btn-sm">View</a><a href="#">
                       $btn = '
                                <a href=edit-leads/'.$row->id.' >
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-edit"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
                              </a><a href=delete-leads/'.$row->id.' onclick="return deleteConfirm()">
                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-delete"><path d="M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z"></path><line x1="18" y1="9" x2="12" y2="15"></line><line x1="12" y1="9" x2="18" y2="15"></line></svg>
                               </a>';

                        return $btn;
                })

                ->rawColumns(['action'])
                ->make(true);
        }
        return view('ajax-list-leads');
    }
	
    public function leads_assigned() {
		
		$staffFilter = array(
			"status" => 1,
			"usertype" => 3
		);
		
        $staff = User::where('admin_id',Auth::user()->id)->where($staffFilter)->get();
        $where1 = array('leads.user_id','=',Auth::user()->id);
		$where2 = array('leads.status','=', "1");
		$where3 = array('leads.is_active','=',"1");		
		$whereArray = array($where1, $where2, $where3);
		
		$lead  = Lead::where($whereArray)->orderby('id',"desc")->get();

        return view('leads-assigned',array("leaddata" => $lead,"staffdata" => $staff));
    }
	
	
	
	public function leadsAssignedRetrival() {
		$offset = $_REQUEST['start'] ;
		
		$limit = $_REQUEST['length'];
		
		$search = json_encode($_REQUEST['search']);
		foreach( $_REQUEST['search'] as $key => $value) {
		   $search = trim($value);
		   break;
		}
		
		$staffFilter = array(
			"status" => 1,
			"usertype" => 3
		);

		$staff = User::where('admin_id',Auth::user()->id)->where($staffFilter)->get();
		
		$searchValue = $search;
		$search = strlen($search);
	
		$whereArray = [];
		$orWhereFilter = [];
		
		$where1 = array('leads.user_id','=',Auth::user()->id);
		$where2 = array('leads.status','=', "1");
		$where3 = array('leads.is_active','=',"1");

		$whereArray = array($where1, $where2, $where3);

		$orWhereFilter1 = $orWhereFilter2 = $orWhereFilter3=  $orWhereFilter4= $orWhereFilter5= $orWhereFilter6= array();
		
		if(isset($_REQUEST['status']) && $_REQUEST['status'] >= 0) {
			$leadStatus = $_REQUEST['status'];
				$whereArray[] = array('lead_status','=',"$leadStatus");
			
		}
		
		if ($search > 0) {
			$whereArray = array();				
			$orWhereFilter1 = array($where1, $where2, $where3);
			$orWhereFilter2 = array($where1, $where2, $where3);
			$orWhereFilter3 = array($where1, $where2, $where3);
			$orWhereFilter4 = array($where1, $where2, $where3);
			$orWhereFilter5 = array($where1, $where2, $where3);
			$orWhereFilter1[] = array('leads.mobile_no','like',"$searchValue%");
			$orWhereFilter2[] = array('leads.mail_id','like',"$searchValue%");			
			$orWhereFilter3[] = array('leads.name','like',"$searchValue%");
			$orWhereFilter4[] = array('leads.project_name','like',"$searchValue%");
			$orWhereFilter5[] = array('leads.segment_name','like',"$searchValue%");
		}

		$lead  = Lead::where($whereArray)->orWhere($orWhereFilter1)->orWhere($orWhereFilter2)->orWhere($orWhereFilter3)->orWhere($orWhereFilter4)->orWhere($orWhereFilter5)->orderby('id','desc')->offset($offset)->limit($limit)->get();
		
		foreach($lead as $key1 => $value1) {
			foreach($staff as $key => $value) {
				if ($value1->assigned_to == $value->id) {
					$lead[$key1]->assignee = ucwords($value->name);
				} 
			}
		}
		
		//echo "<pre>";
		
		
		$count = Lead::where($whereArray)->count();

		$filterCount =  Lead::where($whereArray)->orWhere($orWhereFilter1)->orWhere($orWhereFilter2)->orWhere($orWhereFilter3)->count();
		
		$result = array("search" => $whereArray,"draw" => $_REQUEST['draw'],"recordsTotal" => $count,"recordsFiltered" => $filterCount);
		
		$result['data'] = $lead;
		
		print_r(json_encode($result));
	}
	
	
	public function view_leads_assigned(){
		
        $lead  = Lead::where('assigned_to',Auth::user()->id)->orderby('id','desc')->get();
		$leadAttended = DB::table('lead_comments')
            ->select('lead_id')
            ->distinct('lead_id')
            ->where('user_id',Auth::user()->id)
			->get();
		
		$attendedLeads = [];
		
		if (null !== $leadAttended) {
			foreach($leadAttended as $key => $value) {
					$attendedLeads[] = $value->lead_id;
			}
		}

        return view('view-assigned-leads',array("leaddata" => $lead,"attendedLeads" => $attendedLeads));
    }
	

    public function leads_assigned_staff(Request $request){
        // echo "<pre>";
	    
		//$leadIds = $_POST['lead_id'];
		$leadIds = explode(",",$_POST['lead-ids']);
		$staffId = $_POST['staff_id'];
		
		foreach($leadIds as $key => $value) {
			Lead::where('id', '=', $value)->update(array('assigned_to' => $staffId));
		}
		
		return redirect(route('leads-assigned'))->with('message', 'Leads Assigned Successfully!!');
    }


	public function setLeadStatus(Request $request){
        // echo "<pre>";
	    
		//$leadIds = $_POST['lead_id'];
		$leadIds = explode(",",$_POST['leadIds']);
		$status = $_POST['status'];
		
		foreach($leadIds as $key => $value) {
			Lead::where('id', '=', $value)->update(array('lead_status' => $status));
		}
		echo "success";
    }
    /**
    * Add Category master
    *
    * @return true or false
    */
    public function add_import_leads(){

        $data["projects"] = Project::where('user_id',Auth::user()->id)->get();
        $data["segments"] = Segment::where('user_id',Auth::user()->id)->get();
        //$data["campaigns"] = Campaign::where('user_id',Auth::user()->id)->get();
		$data["campaigns"] = Campaign::where([['user_id', Auth::user()->id],['is_active',1]])->get();

        return view("add-import-leads",$data);
    }

    function add_import_leads_post_data(Request $request)
    {
		
		
        $this->validate($request, [
            //'leads'  => 'required|mimes:xls,xlsx'
        ]);

        if($request->project_type == 2){ // FOR NEW
            $project = new Project();
            $project->user_id      = Auth::user()->id;
            $project->project_name = $request['project_name'];
            $project->for_source   = 'Facebook';
            $project->status       = 1;
            $project->save();
            $projectid   = $project->id;
            $projectname =  $request['project_name'];
        }else{
            $projectid   = $request['project_id'];
            $projectname = Project::where('id',$projectid)->first()->project_name;
        }

        if($request->segment_type == 2){ // FOR NEW
            $segment = new Segment();
            $segment->user_id      = Auth::user()->id;
            $segment->segment_name = $request['segment_name'];
            $segment->for_source   = 'Facebook';
            $segment->status       = 1;
            $segment->save();
            $segmentid   = $segment->id;
            $segmentname = $request['segment_name'];
        }else{
            $segmentid   = $request['segment_id'];
            $segmentname = Segment::where('id',$segmentid)->first()->segment_name;
        }

        $lead = request()->file('leads');
		
        $File = $lead;
        $arrResult = array();
        $handle = fopen($File, "r");

        if (empty($handle) === false) {
            $x=0;
            $count = 0;

            while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
                $arrResult[] = $data;

                if ($count > 0) {
                    $lead = new Lead();

                    $lead->user_id               = Auth::user()->id;

                    $lead->project_id            = $projectid;
                    $lead->project_type          = $request->project_type;
                    $lead->project_name          = $projectname;

                    $lead->segment_id            = $segmentid;
                    $lead->segment_type          = $request->segment_type;
                    $lead->segment_name          = $segmentname;

                    $lead->campaigns_id          = $request['campaign_id'];

                    $lead->name                  = $arrResult[$x][0];
                    $lead->mail_id               = isset($arrResult[$x][1]) ? $arrResult[$x][1] :"";
                    $lead->mobile_no             = isset($arrResult[$x][2]) ? 
                    $lead->mail_id               = isset($arrResult[$x][1]) ? $arrResult[$x][1] :"";;
                    
					$lead->country               = isset($arrResult[$x][3]) ? $arrResult[$x][3] : null;
                    
					$lead->state                 = isset($arrResult[$x][4]) ? $arrResult[$x][4] : null;
                    $lead->city                  = isset($arrResult[$x][5]) ? $arrResult[$x][5] : null;
                    $lead->zipcode               = isset($arrResult[$x][6]) ? $arrResult[$x][6] : null;
                    $lead->company               = isset($arrResult[$x][7]) ? $arrResult[$x][7] : null;
                    $lead->position              = isset($arrResult[$x][8]) ? $arrResult[$x][8] : null;
                    $lead->address1              = isset($arrResult[$x][9]) ? $arrResult[$x][9] : null;
                    $lead->address2              = isset($arrResult[$x][10]) ? $arrResult[$x][10] : null;
                    
					$lead->source                = 'Upload';
                    $lead->status                = 1;

                    $lead->save();
                    $lastid = $lead->id;

                    // ADD TEMP CORN DATA TABLE
                    $cautomationcount = DB::table('automations')
                        ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
                        ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                        ->where('automations.campaign_id', $request['campaign_id'])
                        ->where('sms_automation_messages.delivery_type', 'scheduled')
                        ->count();

                    if($cautomationcount > 0){
                        $cautomation = DB::table('automations')
                            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image','sms_automation_messages.is_active')
                            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                            ->where('automations.campaign_id', $request['campaign_id'])
                            ->where('sms_automation_messages.delivery_type', 'scheduled')
                            ->get();

                        foreach($cautomation as $row){

                            if($row->delivery_day == 0){ //Today
                                $newdatetime = date('Y-m-d '.$row->delivery_time);
                            }else{ //After Day
                                $newdatetime = new DateTime(date('Y-m-d '.$row->delivery_time).' + '.$row->delivery_day.' day');
                            }


//if (strttotime$newdatetime > strtotime("now")) {
                            $leadcorn = new LeadcornCampaigns();
                            $leadcorn->user_id               = Auth::user()->id;
                            $leadcorn->campaign_id           = $request['campaign_id'];
                            $leadcorn->lead_id               = $lastid;
                            $leadcorn->automation_messages_id= $row->id;

                            $leadcorn->name                  = $arrResult[$x][0];
                            $leadcorn->mail_id               = $arrResult[$x][1];
                            $leadcorn->mobile_no             = $arrResult[$x][2];

                            $leadcorn->automation_type       = $row->automation_type;

                            $leadcorn->delivery_date_time    = $newdatetime;
                            $leadcorn->message               = $row->message;
                            $leadcorn->image                 = $row->image;
                            $leadcorn->status                = 2;

$leadDetail = new LeadDetails();					
							$leadDetail->lead_id               = $lastid;
							$leadDetail->automation_messages_id= $row->id;
							$leadDetail->delivery_date_time    = $newdatetime;      
							              
							if ($row->is_active == "0") {
								$leadcorn->is_stopped = "1";
								$leadcorn->stopped_reason = "Event is in off state on lead creation";
								$leadDetail->is_cancelled = "1";
								$leadDetail->failure_reason = "Event is in off state on lead creation";
							}

							$leadcorn->save();
							$leadDetail->save();
                          //  $leadcorn->save();
/*} else {

$leadDetail = new LeadDetails();					
								$leadDetail->lead_id               = $lastid;
								$leadDetail->automation_messages_id= $row->id;
								$leadDetail->delivery_date_time    = date("Y-m-d H:i:s",$newdatetime); 
								$leadDetail->is_cancelled    = "1";
								if ($row->is_active == "0") {
								$leadDetail->failure_reason =  "Event is in off state on lead creation";
								} else {
									$leadDetail->failure_reason =  "Delivery date set to passed date";
								}
								$leadDetail->save();	

}*/
                        }
                    }

                    // SEND MESSAGE
                    //DB::enableQueryLog();
                    $smscount = DB::table('automations')
                        ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                        ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                        ->where('automations.automation_type', 1)
                        ->where('automations.campaign_id', $request['campaign_id'])
                        ->where('sms_automation_messages.delivery_type', 'initial')
						->where('sms_automation_messages.is_active', 1)
                        ->count();

                    if($smscount > 0){
                        //DB::enableQueryLog();
                        $smsdata = DB::table('automations')
                            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                            ->where('automations.automation_type', 1)
                            ->where('automations.campaign_id', $request['campaign_id'])
                            ->where('sms_automation_messages.delivery_type', 'initial')
							->where('sms_automation_messages.is_active', 1)
                            ->first();
						$message = isset($smsdata->message) ? $smsdata->message : "";
                        //echo str_replace("{Full Name}",$request['name'],$smsdata->message); die;
                        testsendsms($arrResult[$x][2],str_replace("{Full Name}",$arrResult[$x][0],$message));
                        //$query = DB::getQueryLog();
                        //echo "<pre>"; print_r($query);die;
                    }

                    // SEND EMAIL
                    $emailcount = DB::table('automations')
                        ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                        ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                        ->where('automations.automation_type', 2)
                        ->where('automations.campaign_id', $request['campaign_id'])
                        ->where('sms_automation_messages.delivery_type', 'initial')
						->where('sms_automation_messages.is_active', 1)
                        ->count();

                    if($emailcount > 0){
                        $emaildata = DB::table('automations')
                            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                            ->where('automations.automation_type', 2)
                            ->where('automations.campaign_id', $request['campaign_id'])
                            ->where('sms_automation_messages.delivery_type', 'initial')
							->where('sms_automation_messages.is_active', 1)
                            ->first();
						$message = isset($emaildata->message) ? $emaildata->message : "";
                        testsendemail($arrResult[$x][1],str_replace("{Full Name}",$arrResult[$x][0],$message));
                    }

                    // SEND WHATSAPP
                    $whatsappcount = DB::table('automations')
                        ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                        ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                        ->where('automations.automation_type', 3)
                        ->where('automations.campaign_id', $request['campaign_id'])
                        ->where('sms_automation_messages.delivery_type', 'initial')
						->where('sms_automation_messages.is_active', 1)
                        ->count();

                    if($whatsappcount > 0){
                        $whatsappdata = DB::table('automations')
                            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
                            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                            ->where('automations.automation_type', 3)
                            ->where('automations.campaign_id', $request['campaign_id'])
                            ->where('sms_automation_messages.delivery_type', 'initial')
							->where('sms_automation_messages.is_active', 1)
                            ->first();
						$message = isset($whatsappdata->message) ? $whatsappdata->message : "";

                        testsendwhatsapp($arrResult[$x][2],str_replace("{Full Name}",$arrResult[$x][0],$message),$whatsappdata->image);
                    }

                    // INSTANT SEND WHATSAPP (By Subrata Saha)
                    /*
					$whatsappcountss = DB::table('sms_automations')
                        ->select('sms_automations.user_id','sms_automations.series_name','sms_automations.automation_type','bulk_sms_automation_message.id','bulk_sms_automation_message.message','bulk_sms_automation_message.custom_full_name')
                        ->join('bulk_sms_automation_message','bulk_sms_automation_message.fu','=','sms_automations.id')
                        ->where('sms_automations.automation_type', 3)
                        ->where('sms_automations.campaigns_id', $request['campaign_id'])
                        ->count();

                    if($whatsappcountss > 0){
                        $whatsappdatass = DB::table('sms_automations')
                            ->select('sms_automations.user_id','sms_automations.series_name','sms_automations.automation_type','bulk_sms_automation_message.id','bulk_sms_automation_message.message','bulk_sms_automation_message.custom_full_name','bulk_sms_automation_message.image')
                            ->join('bulk_sms_automation_message','bulk_sms_automation_message.series_id','=','sms_automations.id')
                            ->where('sms_automations.automation_type', 3)
                            ->where('sms_automations.campaigns_id', $request['campaign_id'])
                            ->get();

                        foreach ($whatsappdatass as $rows)  {
                            copynewtestsendwhatsapp($arrResult[$x][2],str_replace("{Full Name}",$arrResult[$x][0],$rows->message),$rows->image);
                        }
                    }
					*/
                }
                $count++;
                $x++;
            }
            fclose($handle);
        }

        //Excel::import(new LeadsImport, $request->file('leads')->store('temp'));
        //return back();

		Session::flash('message', "Leads Uploaded successfully.");

		return redirect('add-import-leads');
    }

    /**
    * Edit LEADS view page
    *
    * @return true or false
    */
    public function edit_leads(Request $request, $leadsid){

        $data["projects"] = Project::where('user_id',Auth::user()->id)->get();
        $data["segments"] = Segment::where('user_id',Auth::user()->id)->get();
        //$data["campaigns"] = Campaign::where('user_id',Auth::user()->id)->get();
		$data["campaigns"] = Campaign::where([['user_id', Auth::user()->id],['is_active',1]])->get();
        $data["leadsdata"] = Lead::where('id',$leadsid)->get()[0];

        return view('edit-leads',$data);
    }

    /**
    * Edit country after post
    *
    * @return true or false
    */
    public function edit_leads_post(Request $request, $leadsid){

        $this->validate(request(),[
            'name'   => 'required',
        ]);

        if($request->project_type == 2){ // FOR NEW
            if(Segment::where('segment_name',$request['segment_name'])->count() > 0){
                $projectid = $request['project_id'];
                $projectname =  $request['project_name'];
            }else{
                $project = new Project();
                $project->user_id      = Auth::user()->id;
                $project->project_name = $request['project_name'];
                $project->for_source   = 'Facebook';
                $project->status       = 1;
                $project->save();
                $projectid   = $project->id;
                $projectname =  $request['project_name'];
           }

        }else{
            $projectid = $request['project_id'];
            $projectname = Project::where('id',$projectid)->first()->project_name;
        }

        if($request->segment_type == 2){ // FOR NEW

            if(Segment::where('segment_name',$request['segment_name'])->count() > 0){
                $segmentid   = $request['segment_id'];
                $segmentname = $request['segment_name'];
            }else{
                $segment = new Segment();
                $segment->user_id      = Auth::user()->id;
                $segment->segment_name = $request['segment_name'];
                $segment->for_source   = 'Facebook';
                $segment->status       = 1;
                $segment->save();
                $segmentid   = $segment->id;
                $segmentname = $request['segment_name'];
            }

        }else{
            $segmentid   = $request['segment_id'];
            $segmentname = Segment::where('id',$segmentid)->first()->segment_name;
        }
		
		$oldCampaignId = $request['old_campaign_id'];
		
        $data = array(
            'project_id'                  => $projectid,
            'project_type'                => $request->project_type,
            'project_name'                => $projectname,

            'segment_id'                  => $segmentid,
            'segment_type'                => $request->segment_type,
            'segment_name'                => $segmentname,

            'campaigns_id'                => $request['campaign_id'],

            'name'                        => $request['name'],
            'mail_id'                     => $request['mail_id'],
            'mobile_no'                   => $request['mobile_no'],
            'state'                       => $request['state'],
            'city'                        => $request['city'],
            'zipcode'                     => $request['zipcode'],
            'company'                     => $request['company'],
            'position'                    => $request['position'],
            'address1'                    => $request['address1'],
            'address2'                    => $request['address2'],
        );

		if ($oldCampaignId !== $data['campaigns_id']) {
date_default_timezone_set("Asia/kolkata");
$data['campaign_activated_on'] = date("Y-m-d H:i:s");
			//$data['campaign_activated_on'] = new DateTime(date('Y-m-d H:i:s'));
		}
		
		Lead::where('id', $leadsid)->update($data);
		
		if ($oldCampaignId !== $data['campaigns_id']) {
			$leadCronFilter = array('lead_id'=> $leadsid,'campaign_id' => $oldCampaignId);
			
		    $leadCronAffectedRows = LeadcornCampaigns::where($leadCronFilter)->update(array('is_stopped' => 1,'reason' => 'Campaign Changed'));
			$this->sendInstantCampaign_AddCron($leadsid, $data);
		}
		
		
        Session::flash('message', "Leads Updated successfully.");
		return redirect('leads-master');
        //return redirect('edit-leads/'.$leadsid);
    }
	
	public function addLeadComment() {
		if (strlen(trim($_POST['comment'])) > 0) {
			$leadComment = new LeadComments();
			$leadComment->user_id = Auth::user()->id;
			$leadComment->lead_id = $_POST['leadId'];
			$leadComment->comments = $_POST['comment'];
			$leadComment->status = isset($_POST['leadStatus']) ? $_POST['leadStatus'] : "0";
			//$leadComment->followup_date = strlen($_POST['followupDate']);
			//$leadComment->followup_time = null !== $_POST['followupTime'] ? $_POST['followupTime'] : null;		
			$leadComment->save();	
		}
		
		if (isset($_POST['source']) && $_POST['source'] == "followup") {
			//$status = $_POST['leadStatus'];
			LeadFollowups::where('lead_id', '=', $_POST['leadId'])->update(array('status' => "1"));
		}
		if ( isset($_POST['followupDate']) && strlen($_POST['followupDate']) > 0) {
			$leadFolloup = new LeadFollowups();
			$leadFolloup->user_id = Auth::user()->id;
			$leadFolloup->lead_id = $_POST['leadId'];
			$leadFolloup->followup_date = $_POST['followupDate'];
			$leadFolloup->followup_time = $_POST['followupTime'];
			$leadFolloup->save();
		}
		
		if (!isset($_POST['source']) && (isset($_POST['leadStatus']) && $_POST['leadStatus'] != "0")) {
			$leadStatus = new LeadStatus();
			$leadStatus->user_id = Auth::user()->id;
			$leadStatus->lead_id = $_POST['leadId'];
			$leadStatus->status = $_POST['leadStatus'];
			$leadStatus->save();
		}
		Lead::where('id', '=', $_POST['leadId'])->update(array('lead_status' => $_POST['leadStatus']));
		echo "success";					
	}
		
	public function addLeadFollowUp() {
		$leadFolloup = new LeadFollowups();
		$leadFolloup->user_id = Auth::user()->id;
		$leadFolloup->lead_id = $_POST['leadId'];
		$leadFolloup->followup_date = $_POST['followUpDate'];
		$leadFolloup->followup_time = $_POST['followUpTime'];
		$leadFolloup->comments = $_POST['comments'];
		$leadFolloup->save();
		
		if ($_POST['status'] != "0") {
			$leadStatus = new LeadStatus();
			$leadStatus->user_id = Auth::user()->id;
			$leadStatus->lead_id = $_POST['leadId'];
			$leadStatus->status = $_POST['status'];
			$leadStatus->save();
		}	
			
		echo $leadFolloup->id;					
	}
	
	
	public function viewLeadFolloups() {
		
		//$lead  = Lead::where('assigned_to',Auth::user()->id)->get();

        //return view('view-assigned-leads',array("leaddata" => $lead));
		$currentdate = date('Y-m-d');
		//echo $currentdate; die;
		$leadFollowups = DB::table('leads_followups')
		->select('leads_followups.*','leads.name','leads.mobile_no','leads.project_name')
		->join('leads','leads.id','=','leads_followups.lead_id')
		->where('leads_followups.user_id', Auth::user()->id)
		->where('leads_followups.followup_date','>=',$currentdate)
		->where('leads_followups.status','=',null)
		->where('leads.is_active', 1)
		->orderby('leads_followups.followup_date','asc')
		->get();
          
		return view('view-leads-followup',array("leadFollowups" => $leadFollowups));
	}
	
	public function getLeadComments() {
		$leadId = $_POST['leadId'];
		$comments = LeadComments::where('lead_id',$leadId)->get();
		$status = Lead::where('id', '=', $leadId)->select("lead_status")->get()[0];
		return json_encode(array('data'=>$comments,'status' => $status->lead_status));
	}

	public function closeLead() {
		$leadId = $_POST['leadId'];
		Lead::where('id', '=', $leadId)->update(array('status' => 2));
			//DB::table('lead_corn_campaigns')->where('lead_id',$leadsid)->delete();
			            
	}
    /**
    * DELETE Category after get url
    *
    * @return true or false
    */
    public function delete_leads(Request $request, $leadsid){

        $data = Lead::where('id',$leadsid)->first();
        if(!empty($data)){
            //$delete = Lead::where('id',$leadsid)->delete();
			 Lead::where('id', '=', $leadsid)->update(array('is_active' => 0));
			//DB::table('lead_corn_campaigns')->where('lead_id',$leadsid)->delete();
			LeadcornCampaigns::where('lead_id', '=', $leadsid)->update(array('is_stopped' => 1,'stopped_reason' => "Lead Deleted"));
            Session::flash('message', "Leads Records Deleted Successfully.");
            return redirect('leads-master');
        }else{
            Session::flash('message', "Leads Records not found.");
            return redirect('leads-master');
        }
    }
	
	public function deleteLeadsFromCron() {
		$cronData = DB::table('lead_corn_campaigns')->select('lead_id')->distinct('lead_id')->get();
		
		foreach($cronData as $key => $value) {
			$leadExist = DB::table('leads')->where('id',$value->lead_id)->count();
			//echo $leadExist; die;
			$count =  0;
			if (!$leadExist) {
				DB::table('lead_corn_campaigns')->where('lead_id',$value->lead_id)->delete();
				$count++;
			} 
			
		}
		echo $count." Rows Deleted Successfully";
	}
	
	public function deleteStoppedCron() {
		$currentdatetime = date('Y-m-d H:i');
		$data = DB::table('lead_corn_campaigns')->select('id','delivery_date_time')->get();
		$count = 0;
		
		foreach($data as $row){

			$deliverydate = date('Y-m-d H:i',strtotime($row->delivery_date_time));

			if($deliverydate < $currentdatetime){
				DB::table('lead_corn_campaigns')->where('id',$row->id)->delete();
				$count++;
			}
		}
		echo $count." Rows Deleted Successfully";		
	}

	public function sendInstantCampaign_AddCron($leadId, $data) {
		 $cautomationcount = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.campaign_id', $data['campaigns_id'])
            ->where('sms_automation_messages.delivery_type', 'scheduled')
            ->count();

        if($cautomationcount > 0){
            $cautomation = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.campaign_id', $data['campaigns_id'])
                ->where('sms_automation_messages.delivery_type', 'scheduled')
                ->get();

            foreach($cautomation as $row){

                if($row->delivery_day == 0){ //Today
                    $newdatetime = date('Y-m-d '.$row->delivery_time);
                }else{ //After Day
                    $newdatetime = new DateTime(date('Y-m-d '.$row->delivery_time).' + '.$row->delivery_day.' day');
                }

                $leadcorn = new LeadcornCampaigns();
                $leadcorn->user_id                = Auth::user()->id;
                $leadcorn->campaign_id            = $data['campaigns_id'];
                $leadcorn->lead_id                = $leadId;
                $leadcorn->automation_messages_id = $row->id;

                $leadcorn->name                   = $data['name'];
                $leadcorn->mail_id                = $data['mail_id'];
                $leadcorn->mobile_no              = $data['mobile_no'];

                $leadcorn->automation_type        = $row->automation_type;
                $leadcorn->delivery_date_time     = $newdatetime;
                $leadcorn->message                = $row->message;
                $leadcorn->image                  = $row->image;
                $leadcorn->status                 = 2;
                $leadcorn->save();
				/*
				$leadReport = new LeadReports();
                $leadReport->user_id                = Auth::user()->id;
                $leadReport->campaign_id            = $data['campaigns_id'];
                $leadReport->lead_id                = $leadId;
                $leadReport->automation_messages_id = $row->id;

                $leadReport->name                   = $data['name'];
                $leadReport->mail_id                = $data['mail_id'];
                $leadReport->mobile_no              = $data['mobile_no'];

                $leadReport->automation_type        = $row->automation_type;
                $leadReport->delivery_date_time     = $newdatetime;
                $leadReport->message                = $row->message;
                $leadReport->image                  = $row->image;
                $leadReport->status                 = 2;
                $leadReport->save();
				*/
            }
        }

        // SEND MESSAGE
        $smscount = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.automation_type', 1)
            ->where('automations.campaign_id', $data['campaigns_id'])
            ->where('sms_automation_messages.delivery_type', 'initial')
			->where('sms_automation_messages.is_active', 1)
            ->count();

        if($smscount > 0){
            $smsdata = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.automation_type', 1)
                ->where('automations.campaign_id', $data['campaigns_id'])
                ->where('sms_automation_messages.delivery_type', 'initial')
				->where('sms_automation_messages.is_active', 1)
                ->first();
			 $message = isset($smsdata->message) ? $smsdata->message : "";
            testsendsms($data['mobile_no'],str_replace("{Full Name}",$data['name'],$message));
        }

        // SEND EMAIL
        $emailcount = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.automation_type', 2)
            ->where('automations.campaign_id', $data['campaigns_id'])
            ->where('sms_automation_messages.delivery_type', 'initial')
			->where('sms_automation_messages.is_active', 1)
            ->count();

        if($emailcount > 0){
            $emaildata = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.automation_type', 2)
                ->where('automations.campaign_id', $data['campaigns_id'])
                ->where('sms_automation_messages.delivery_type', 'initial')
				->where('sms_automation_messages.is_active', 1)
                ->first();
			$message = isset($emaildata->message) ? $emaildata->message : "";

            testsendemail($data['mail_id'],str_replace("{Full Name}",$data['name'],$message));
        }

        // SEND WHATSAPP
        $whatsappcount = DB::table('automations')
            ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message')
            ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
            ->where('automations.automation_type', 3)
            ->where('automations.campaign_id', $data['campaigns_id'])
            ->where('sms_automation_messages.delivery_type', 'initial')
			->where('sms_automation_messages.is_active', 1)
            ->count();

        if($whatsappcount > 0){
            $whatsappdata = DB::table('automations')
                ->select('automations.user_id','automations.series_name','automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day','sms_automation_messages.delivery_time','sms_automation_messages.delivery_type','sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
                ->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
                ->where('automations.automation_type', 3)
                ->where('automations.campaign_id', $data['campaigns_id'])
                ->where('sms_automation_messages.delivery_type', 'initial')
				->where('sms_automation_messages.is_active', 1)
                ->first();
			$message = isset($whatsappdata->message) ? $whatsappdata->message : "";
            testsendwhatsapp($data['mobile_no'],str_replace("{Full Name}",$data['name'],$message),$whatsappdata->image);
        }

        // INSTANT SEND WHATSAPP (By Subrata Saha)
		/*
        $whatsappcounts = DB::table('sms_automations')
            ->select('sms_automations.user_id','sms_automations.series_name','sms_automations.automation_type','bulk_sms_automation_message.id','bulk_sms_automation_message.message','bulk_sms_automation_message.custom_full_name')
            ->join('bulk_sms_automation_message','bulk_sms_automation_message.series_id','=','sms_automations.id')
            ->where('sms_automations.automation_type', 3)
            ->where('sms_automations.campaigns_id', $request['campaign_id'])
            ->count();

        if($whatsappcounts > 0){
            $whatsappdatas = DB::table('sms_automations')
                ->select('sms_automations.user_id','sms_automations.series_name','sms_automations.automation_type','bulk_sms_automation_message.id','bulk_sms_automation_message.message','bulk_sms_automation_message.custom_full_name','bulk_sms_automation_message.image')
                ->join('bulk_sms_automation_message','bulk_sms_automation_message.series_id','=','sms_automations.id')
                ->where('sms_automations.automation_type', 3)
                ->where('sms_automations.campaigns_id', $request['campaign_id'])
                ->get();

            foreach($whatsappdatas as $row) {
                copytestsendwhatsappnew($request['mobile_no'],str_replace("{Full Name}",$request['name'],$row->message),$row->image);
            }
        }
		*/
	}
	
	public function leadsView(Request $request) {
		//return view("leads-view");
		
		return view("ajax-list-leads"); 	
	}

	public function leadsRetrival(Request $request) {		
		//$lead = Lead::where([['user_id',Auth::user()->id],['is_active',1]])->orderby('id', 'desc')->limit(10)->get();

		$offset = $_REQUEST['start'] ;
		
		$limit = $_REQUEST['length'];
		

		$search = json_encode($_REQUEST['search']);
		foreach( $_REQUEST['search'] as $key => $value) {
		   $search = trim($value);
		   break;
		}
	
		$searchValue = $search;

        $search = strlen($search);
	
		$whereArray = [];
		$orWhereFilter = [];
		$where1 = array('leads.user_id','=',Auth::user()->id);
		$where2 = array('leads.status','=', "1");
		$where3 = array('leads.is_active','=',"1");

		$whereArray = array($where1, $where2, $where3);

			$orWhereFilter1 = $orWhereFilter2 = $orWhereFilter3=  $orWhereFilter4= $orWhereFilter5= $orWhereFilter6= array();
    			
			if ($search > 0) {
				$whereArray = array();
                        	//$whereArray[] = array('leads.name','like',"$searchValue%");
				//$whereArray[] = $where4;
                        	$orWhereFilter1 = array($where1, $where2, $where3);
				$orWhereFilter2 = array($where1, $where2, $where3);
				$orWhereFilter3 = array($where1, $where2, $where3);
				$orWhereFilter4 = array($where1, $where2, $where3);
				$orWhereFilter5 = array($where1, $where2, $where3);
				$orWhereFilter6 = array($where1, $where2, $where3);

				$orWhereFilter1[] = array('leads.mobile_no','like',"$searchValue%");
   				$orWhereFilter2[] = array('leads.mail_id','like',"$searchValue%");
				$orWhereFilter3[] = array('campaigns.campaigns_name','like',"$searchValue%");
				$orWhereFilter4[] = array('leads.name','like',"$searchValue%");
				$orWhereFilter5[] = array('leads.project_name','like',"$searchValue%");
				$orWhereFilter6[] = array('leads.segment_name','like',"$searchValue%");
            }

			if(isset($_REQUEST['source']) && $_REQUEST['source'] == "social") {
				if ($_REQUEST['sourceVal'] == "1") {
					$whereArray[] = array('source','=',"Facebook");
				}
			}
			
			if(isset($_REQUEST['source']) && $_REQUEST['source'] == "leads-on") {
					$value = $_REQUEST['sourceVal'];
					$whereArray[] = array('leads.created_at','like',"$value%");
				
			}
			

		$lead = 
Lead::where($whereArray)->orWhere($orWhereFilter1)->orWhere($orWhereFilter2)->orWhere($orWhereFilter3)->orWhere($orWhereFilter4)->orWhere($orWhereFilter5)->orWhere($orWhereFilter6)
		->join('campaigns', 'leads.campaigns_id', '=', 'campaigns.id')
		->select('leads.created_at','leads.is_cron_disabled','campaigns.campaigns_name', 'leads.id', 'leads.name', 'leads.mail_id', 'leads.mobile_no', 'leads.project_name', 
'leads.segment_name','leads.source')
		->orderby('leads.id','desc')
		->offset($offset)
                ->limit($limit)
		->get();
		

		/*
                $lead = Lead::where([['leads.user_id',Auth::user()->id],['leads.status',1]])->orderby('leads.id', 'desc')
                ->join('campaigns', 'leads.campaigns_id', '=', 'campaigns.id')
                ->select('campaigns.campaigns_name', 'leads.id', 'leads.name', 'leads.mail_id', 'leads.mobile_no', 'leads.project_name', 'leads.segment_name')
                ->offset($offset)
                ->limit($limit)
                ->get();
		*/



		$search = json_encode($_REQUEST['search']);
		
		foreach( $_REQUEST['search'] as $key => $value) {
		   $search = trim($value);
                   break;		
		}
		
		//$search = strlen($search);
		$count = Lead::where($whereArray)->count();

		

		$filterCount =  Lead::where($whereArray)->orWhere($orWhereFilter1)->orWhere($orWhereFilter2)->orWhere($orWhereFilter3)->join('campaigns', 'leads.campaigns_id', '=', 'campaigns.id')->count();
		

		$result = array("search" => $whereArray,"draw" => $_REQUEST['draw'],"recordsTotal" => $count,"recordsFiltered" => $filterCount);
		$result['data'] = $lead;
		
		print_r(json_encode($result));
	}

	public function subscribePage(Request $request) {

/*
\Log::info('Incoming page ' . json_encode($request->input())); die; 
*/

		$pageName = $_POST['pageName'];
		
		$pageId = $_POST['pageId'];
			
		$formId = $_POST['formId'];
		
		$userId = Auth::user()->id;
		
		$pageToken = $_POST['pageToken'];

		$campaignId=$_POST['campaignId'];

		$segmentId = $_POST['segmentId'];

		$projectId = $_POST['projectId'];
	
		if($_POST['projectName'] != "0") {
			$project = new Project();
			$project->user_id      = Auth::user()->id;
			$project->project_name = $_POST['projectName'];
			$project->for_source   = 'Facebook';
			$project->status       = 1;
			$project->save();
			$projectId   = $project->id;
		}
	
		if($_POST['segmentName'] != "0") {
			$segment = new Segment();
			$segment->user_id      = Auth::user()->id;
			$segment->segment_name = $_POST['segmentName'];
			$segment->for_source   = 'Facebook';
			$segment->status       = 1;
			$segment->save();
			$segmentId   = $segment->id;
		}

		$ch = curl_init('https://graph.facebook.com/oauth/access_token?grant_type=fb_exchange_token&client_id=3312603435483167&client_secret=ab4719b6fd51d77b5b639ffdc538a2bd&fb_exchange_token='.$pageToken);

		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

		$data = curl_exec($ch);

		curl_close($ch);

		$data = json_decode($data,true);

		$pageToken = isset($data['access_token']) ? $data['access_token'] : $pageToken;

		$formName = $_POST['formName'];

		$pageSubscribed = DB::table('subscribe_pages')
			->where('page_id', '=', $pageId)
			->where('form_id', '=', $formId)
			->first();

		if (is_null($pageSubscribed)) {
/*
			DB::insert('insert into subscribe_pages (user_id,page_id,page_name,page_token,form_id,form_name,campaign_id,segment_id,project_id) 
		values(?,?,?,?,?,?,?,?,?)',[$userId,$pageId,$pageName,$pageToken,$formId,$formName,$campaignId,$segmentId,$projectId]);
*/

$name = isset($_POST['nameField']) ? $_POST['nameField'] : 0;
			$phone = isset($_POST['phoneField']) ? $_POST['phoneField'] : 0;
			$email = isset($_POST['emailField']) ? $_POST['emailField'] : 0;
			$otherFields = isset($_POST['otherField']) ? $_POST['otherField'] : 0;
			
			DB::insert('insert into subscribe_pages 
(user_id,page_id,page_name,page_token,form_id,form_name,campaign_id,segment_id,project_id,name_field,email_field,phone_field,other_fields) 
		values(?,?,?,?,?,?,?,?,?,?,?,?,?)',[$userId,$pageId,$pageName,$pageToken,$formId,$formName,$campaignId,$segmentId,$projectId,$name,$email,$phone,$otherFields]);

		 } else {
			DB::table('subscribe_pages')
			->where('page_id', '=', $pageId)
			->where('form_id', '=', $formId)
			->update(['page_token' => $pageToken]);
		}

		echo "Page subscribed successfully";
	}

	public function deleteBulkLeads() {
		//echo "dd";
		$leadIds = explode(",",$_POST['leadIds']);

		$leads = DB::table('leads')->whereIn('id', $leadIds)->update(['is_active' => "0"]);

 
		DB::table('lead_corn_campaigns')->whereIn('lead_id',$leadIds)->update(array('is_stopped' => 1,'stopped_reason' => "Lead Deleted"));
	}


	public function viewReport(Request $request, $leadId) {

//if (Auth::user()->id == "8") {
		
		$leadData = DB::table('leads')->select('id','name','mail_id','mobile_no','campaigns_id','campaign_activated_on')->where('id', $leadId)->first();
		if(LeadDetails::where('lead_id',$leadId)->count() < 1) {
		$cautomation = DB::table('automations')
		->select('sms_automation_messages.id as eventId','automations.user_id','automations.series_name',
'automations.automation_type','sms_automation_messages.id','sms_automation_messages.message','sms_automation_messages.delivery_day',
'sms_automation_messages.delivery_time','sms_automation_messages.delivery_type',
'sms_automation_messages.custom_full_name','sms_automation_messages.message','sms_automation_messages.image')
		->join('sms_automation_messages','sms_automation_messages.series_id','=','automations.id')
		->where('automations.campaign_id', $leadData->campaigns_id)
		->where('sms_automation_messages.delivery_type', 'scheduled')
		->get();

$data = array();

		foreach($cautomation as $key => $value) {
				$newData['lead_id'] = $leadData->id;				
				$newData['automation_messages_id'] = $value->eventId; 
				
				if ($value->delivery_day > 0) {
					$campaignDateTime = explode(" ",$leadData->campaign_activated_on);
                                        $campaignDate = $campaignDateTime[0];
                                        $msgDeliveryDate =      strtotime($campaignDate." ".$request['delivery_time'].'+ '.$request['delivery_day'].' days');

					//$msgDeliveryDate = 	strtotime($leadData->campaign_activated_on.'+ '.$value->delivery_day.' days');
				} else {
					$campaignDate = explode(" ",$leadData->campaign_activated_on);
					$msgDate = $campaignDate[1];
					$msgDeliveryDate = 	strtotime($campaignDate[0]." ".$value->delivery_time);
					
				}
				
			
					$newData['delivery_date_time'] = date("Y-m-d H:i:s",$msgDeliveryDate);
	
				$cronData = LeadcornCampaigns::where([['lead_id',$leadId],['automation_messages_id',$value->eventId]])->select('delivery_date_time')->first();
				if (null !== $cronData) {
					$newData['is_delivered'] = "0";
					
 					$newData['delivery_date_time'] = $cronData->delivery_date_time;
	
				} else {
					$newData['is_delivered'] = "1";
					$newData['delivery_date_time'] = NULL;
				}
				
				$data[] = $newData;
		}

		if (count($data) > 0) {

			LeadDetails::insert($data);
		}

		}

		$eventDetails = LeadDetails::where('lead_id',$leadId)
		->select('lead_details.*','leads.campaign_activated_on','sms_automation_messages.*','automations.series_name','automations.automation_type','sms_automation_messages.updated_at')
		->join('sms_automation_messages','sms_automation_messages.id','=','lead_details.automation_messages_id')
		->join('automations','automations.id','=','sms_automation_messages.series_id')
		->join('leads','leads.id','=','lead_details.lead_id')
		->orderby('sms_automation_messages.id')
		->get();
		

		/*echo "<pre>";		
		foreach($eventDetails as $key => $value){
			print_r($value);
		}
		*/
		//print_r($eventDetails); die;
		return view("view-lead-details",array("cautomation"=>$eventDetails));
//} else {
//echo "Testing";
//return redirect('leads-master');
//} 	
	}
	
	public function wordpressIntegration() {
		$data["projects"]  = Project::where('user_id', Auth::user()->id)->get();
		$data["segments"]  = Segment::where('user_id', Auth::user()->id)->get();
		$data["campaigns"] = Campaign::where([['user_id', Auth::user()->id],['is_active',1]])->get();
		
		
		$data["wpWebhooks"] = DB::table('wordpress_integrations')
		->join('campaigns','campaigns.id','=','wordpress_integrations.campaign_id')
		->select("wordpress_integrations.*","campaigns.campaigns_name")
		->where('wordpress_integrations.user_id', Auth::user()->id)
		->get();
		
		return view("wordpress-integration",$data);	
	}
	
	public function random_strings($length_of_string){
  
		// String of all alphanumeric character
		$str_result = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
	  
		// Shuffle the $str_result and returns substring
		// of specified length
		return substr(str_shuffle($str_result), 0, $length_of_string);
	}
	
	public function integrateWordpressSite(Request $request) {
		
		//print_r($request->input()); die;
		
		$userId = Auth::user()->id;

		$campaignId=$request['campaign_id'];

		$segmentId = $request['segment_id'];

		$projectId = $request['project_id'];
		
		$website = $request['website'];


		if($request['project_id'] == "0") {
			$project = new Project();
			$project->user_id      = Auth::user()->id;
			$project->project_name = $request['project_name'];
			$project->for_source   = 'Wordpress';
			$project->status       = 1;
			$project->save();
			$projectId   = $project->id;
		}
	
		if($request['segment_id'] == "0") {
			$segment = new Segment();
			$segment->user_id      = Auth::user()->id;
			$segment->segment_name = $request['segment_name'];
			$segment->for_source   = 'Wordpress';
			$segment->status       = 1;
			$segment->save();
			$segmentId   = $segment->id;
		}

		$userCode = $this->random_strings(8);

		DB::insert('insert into wordpress_integrations (user_id,user_url_code,campaign_id,segment_id,project_id,website) 
		values(?,?,?,?,?,?)',[$userId,$userCode,$campaignId,$segmentId,$projectId, $website]);
		
		Session::flash('message', "Webhook Url Created.");
		return redirect('wordpress/integration');
	}	
}
